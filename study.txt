Control Structure

if-Statement
- under which conditions code is executed (Boolean)이 들어가거나 Boolean값으로 변환하려 시도함.
if () {

} else if (){

}
else

Loops
- how often some code is executed
for: Loop n number of times
ex) for (let i = 0; i<10; i++){
    console.log(i);
}

for ... of: Loop throught all elements of an array(Arrays)
ex) const users = ['Max', 'Anna', 'Joel'];

for (const user of users) {
    console.log(user); 
}
//위를 for문으로 바꾸면 
for(let i = 0; i < someArray.length; i++ ){
    console.log(someArray[i]);
}

for ... in: Loop through all properties in an object(Object)
ex) const loggedInUser = {
    name: 'Max',
    age: 32,
    isAdmin: true
};

for(const propertyName in loggedInUser){
    console.log(propertyName);
    console.log(loggedInUser[propertyName]); //#object이지만 array처럼 대문자를 사용한다. loggedInUser.propertyName이랑 같은 의미 
}

while: Loop as long as a certain condition is met
ex) let isFinished = false;
while (!isFinished) {
    isFinished = confirm('do you want to quit?');
}

Booleans
- True or False / usefule whenever you have a yes/no question
- 'true'나 'false'가 아닌 true, false로 쓴다
- Booleans값이 저장되어있는 경우 if (varables)를 바로 쓴다. 변수가 참이면 조건문 실행 거짓이면 실행하지않음.
- 빈 문자열이나 0은 false값
Comparison Operators 
==, ===: Equality(value and/or type)
└ ==는 값만 비교 / ===는 값과 타입 비교
>, <, >=, <=: Greater than, lesser than, greater or equal, lesser or equal
└ 등호의 경우 !을 하려면 전체를 해야한다. ex) !(5>4)
!, !=, !==:Negation / inverse

Local Operators
&&(AND): Yields true if both combined values are true
||(OR): Yields true if one of both values is true

&&가 OR보다 우선순위가 높다.



